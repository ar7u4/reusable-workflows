name: "Build Static NodeJS App"

on:
  workflow_call:

    inputs:
      SLACK_BUILD_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-build - ID'
      SLACK_BUILD_MESSAGE_ID:
        type: string
        required: true
        description: '#gh-build - Message ID'
      ECR_REPO:
        type: string
        required: true
        description: 'Elastic Container Repository of the service'
      ECR_CACHE_REPO:
        type: string
        required: true
        description: 'Caching Elastic Container Repository of the service'
      NODE_VERSION:
        type: string
        required: true
        description: 'node version'
      NODE_OPTIONS:
        type: string
        required: true
        description: 'node options'
      NODE_REGISTRY_URL:
        type: string
        required: true
        description: 'custom node registry'
      ARCHIVE_BUCKET:
        type: string
        required: true
        description: 'archive bucket'
      SERVICE_NAME:
        type: string
        required: true
        description: 'service name'
    secrets:
      slack-bot-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      naga-npm-token:
        required: true
      dockerhub-username:
        required: true
      dockerhub-token:
        required: true
        
jobs:
  build: 
    runs-on: small-runner
    outputs:
      GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}
  
    steps:
      - name: Set environment variables
        run: |
          echo "SHORT_COMMIT=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "GITHUB_ACTOR=${GITHUB_ACTOR}" >> $GITHUB_ENV
          echo "JOB_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: Notify Slack of Build
        id: gh-build
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Starting Build

            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job Tag: ${{ env.TAG }}
            - Job URL: ${{ env.JOB_URL }}
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Checkout
        uses: actions/checkout@v1
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      - name: Install AWS cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.NODE_VERSION }}
          registry-url: ${{ inputs.NODE_REGISTRY_URL }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.naga-npm-token }}

      - name: Build App
        if: github.repository	== 'SwipeStoxGmbH/web-trader'
        run: |
          mkdir -p ~/.npm-global/lib
          npm install -g npm@7.3.0
          npm ci
          CI=false npm run build
          mv build dev_build
          REACT_APP_ENV=production CI=false npm run build
          mv build production_build
          mkdir build; mv dev_build build/dev; mv production_build build/production
          ls build

      - name: Build App
        if: github.repository == 'SwipeStoxGmbH/backoffice'
        run: |
          mkdir -p ~/.npm-global
          npm install -g gulp-cli gulp bower
          npm install
          bower install
          gulp build --env=dev
          mv dist dev_build
          gulp build --env=prod
          mv dist production_build
          mkdir build; mv dev_build build/dev; mv production_build build/production
          ls build

      - name: Build App
        if: github.repository == 'SwipeStoxGmbH/admin-tool'
        run: |
          mkdir ~/.npm-global
          npm install
          rm -rf dev_build production_build build
          npm run build
          mv build dev_build
          REACT_APP_ENV=production npm run build
          mv build production_build
          mkdir build; mv dev_build build/dev; mv production_build build/production

      - name: Login to Amazon ECR
        if: ${{ github.repository == 'SwipeStoxGmbH/admin-tool' || github.repository == 'backoffice' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: ECR repo setup
        if: ${{ github.repository == 'SwipeStoxGmbH/admin-tool' || github.repository == 'backoffice' }}
        uses: SwipeStoxGmbH/reusable-workflows/actions/ecr-setup@master
        with:
          ECR_REPO: ${{ inputs.ECR_REPO }}

      - name: Set up Docker Context for Buildx
        if: ${{ github.repository == 'SwipeStoxGmbH/admin-tool' || github.repository == 'backoffice' }}
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        if: ${{ github.repository == 'SwipeStoxGmbH/admin-tool' || github.repository == 'backoffice' }}
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Build and push image
        if: ${{ github.repository == 'SwipeStoxGmbH/admin-tool' || github.repository == 'backoffice' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          # caching to ECR seems not supported yet
          # cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache
          # cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPO }}:${{ env.TAG }}

      - name: Archive
        run: |
          tar cvzf ${{ env.TAG }}.tar.gz ./build
          aws s3 cp ${{ env.TAG }}.tar.gz s3://${{ inputs.ARCHIVE_BUCKET }}/${{ inputs.SERVICE_NAME }}/${{ env.TAG }}.tar.gz

      - name: Notify Slack of Success 
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Static Build Completed

            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job Tag: ${{ env.TAG }}
            - Job URL: ${{ env.JOB_URL }}
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 

      - name: Notify Slack of Failure
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Static Build Failed 

            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job Tag: ${{ env.TAG }}
            - Job URL: ${{ env.JOB_URL }}
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 

