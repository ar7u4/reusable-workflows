name: "Deploy to production k8s"

on:
  workflow_call:

    inputs:
      SLACK_PROD_DEPLOY_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-deploy-prod ID'
      ECR_REPO:
        type: string
        required: true
        description: 'Elastic Container Repository of the service'
      NAMESPACE:
        type: string
        required: true
        description: 'Namespace in the cluster'
      KUSTOMIZE_OVERLAY:
        type: string
        required: true 
        description: 'Path to Kustomize overlay'
      KUSTOMIZE_ROOT:
        type: string
        required: true
        description: 'Path to Kustomize root'
      IMAGE_TAG:
        type: string
        required: true
        description: 'Image tag to deploy'
      CF_DISTRIBUTION_ID:
        type: string
        required: true
        description: 'CloudFront distribution ID'
      CF_INVALIDATION_PATHS:
        type: string
        required: true
        description: 'CloudFront invalidations paths'
    secrets:
      slack-bot-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      dockerhub-username:
        required: true
      dockerhub-token:
        required: true

jobs:  
  deploy_production:
    runs-on: small-prod-runner
    outputs:
      GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}

    steps:
      - name: Check image tag 
        run: | 
          if [[ ! ${{ inputs.IMAGE_TAG }} =~ ^[a-z]+[-] ]] ; then 
            echo 'Invalid Image Tag'
            echo 'must be in {BRANCH_NAME}-{SHA} format'
            echo 'etc: master-2b7f922'
            exit 1
          fi
    
      - name: Set environment variables
        run: |
          TAG=${{ inputs.IMAGE_TAG }}
          echo "TAG=${{ inputs.IMAGE_TAG }}" >> $GITHUB_ENV 
          echo "GITHUB_ACTOR=${GITHUB_ACTOR}" >> $GITHUB_ENV
          echo "JOB_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.3

      - name: Install AWS cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - name: ECR repo image check
        uses: SwipeStoxGmbH/reusable-workflows/actions/ecr-image-check@master
        with:
          ECR_REPO: ${{ inputs.ECR_REPO }}
          IMAGE_TAG: ${{ inputs.IMAGE_TAG }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: Notify Slack of Production Deploy
        id: gh-deploy-prod
        uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
        with:
          channel_id: ${{ inputs.SLACK_PROD_DEPLOY_CHANNEL_ID }}
          status: |
            Deploying Image on Production

            - Image Tag: ${{ env.TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ env.JOB_URL }}
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Checkout
        uses: actions/checkout@v3

      # This step causes issues when used as a composite action
      # Therefore the Script is executed from the step directly
      # This could be the subject of the next upgrade
      - name: Inject image tag into files
        run: |
          sudo apt-get update -y
          sudo apt-get install gettext -y
          FILES=(${{ inputs.KUSTOMIZE_ROOT }}/base/* ${{ inputs.KUSTOMIZE_OVERLAY }}/*)
          for FILE in ${FILES[@]}; do
            if [[ -n ${PATTERN} ]] ; then
              envsubst "${PATTERN}" < $FILE > /tmp/envsubst || exit 1
            else
              envsubst < $FILE > /tmp/envsubst || exit 1
            fi
            mv /tmp/envsubst $FILE || exit 1
          done
        env:
          PATTERN: $TAG

      - name: Deploy
        uses: SwipeStoxGmbH/reusable-workflows/actions/deploy@master
        with:
          NAMESPACE: ${{ inputs.NAMESPACE }}
          KUSTOMIZE_OVERLAY: ${{ inputs.KUSTOMIZE_OVERLAY }}

      - name: Invalidate CloudFront
        uses: chetan/invalidate-cloudfront-action@v1
        if: ${{ inputs.CF_DISTRIBUTION_ID != '' && inputs.CF_INVALIDATION_PATHS != '' }}
        env:
          DISTRIBUTION: ${{ inputs.CF_DISTRIBUTION_ID }}
          PATHS: ${{ inputs.CF_INVALIDATION_PATHS }}
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}

      - name: Notify Slack of Success
        if: success()
        uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
        with:
          channel_id: ${{ inputs.SLACK_PROD_DEPLOY_CHANNEL_ID }}
          message_id: ${{ steps.gh-deploy-prod.outputs.message_id }}
          status: |
            Image Deployed on Production

            - Image Tag: ${{ inputs.IMAGE_TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ env.JOB_URL }}
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Notify Slack of Failure
        if: failure()
        uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
        with:
          channel_id: ${{ inputs.SLACK_PROD_DEPLOY_CHANNEL_ID }}
          message_id: ${{ steps.gh-deploy-prod.outputs.message_id }}
          status: |
            Image Production Deployment Failed

            - Image Tag: ${{ inputs.IMAGE_TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ env.JOB_URL }}
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}


