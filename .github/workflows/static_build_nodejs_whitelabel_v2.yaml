name: "Build Static NodeJS App"

on:
  workflow_call:

    inputs:
      BUILD_ENVIRONMENT:
        type: string
        required: true
        description: 'set environment name to load from'
      SLACK_BUILD_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-build - ID'
      SLACK_BUILD_MESSAGE_ID:
        type: string
        required: true
        description: '#gh-build - Message ID'
      S3_TEMP_DIR:
        type: string
        required: true
        description: 'S3 temp directory for artifact push'
      NODE_VERSION:
        type: string
        required: true
        description: 'node version'
      NODE_OPTIONS:
        type: string
        required: true
        description: 'node options'
      NODE_REGISTRY_URL:
        type: string
        required: true
        description: 'custom node registry'
      ARCHIVE_BUCKET:
        type: string
        required: true
        description: 'archive bucket'
      GENERATE_SOURCEMAP:
        type: string
        required: true
        description: ''
      SERVICE_NAME:
        type: string
        required: true
        description: 'service name'
    secrets:
      slack-bot-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      naga-npm-token:
        required: true
      dockerhub-username:
        required: true
      dockerhub-token:
        required: true
        
jobs:
  build: 
    runs-on: small-runner
    environment: ${{ inputs.BUILD_ENVIRONMENT }}
    outputs:
      GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}
  
    steps:
      - name: Set environment variables
        run: |
          echo "SHORT_COMMIT=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "GITHUB_ACTOR=${GITHUB_ACTOR}" >> $GITHUB_ENV
          echo "JOB_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
      
      - name: Expose github environment as shell variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() { jq -r "to_entries[] | \"\(.key)<<$EOF\n\(.value)\n$EOF\n\""; }
          echo "$VARS_CONTEXT" | to_envs >> $GITHUB_ENV
          echo "$SECRETS_CONTEXT" | to_envs >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: Notify Slack of Build
        id: gh-build
        uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Starting Build

            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job Tag: ${{ env.TAG }}
            - Job URL: ${{ env.JOB_URL }}
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Checkout
        uses: actions/checkout@v3.1.0
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      - name: Install AWS cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.NODE_VERSION }}
          registry-url: ${{ inputs.NODE_REGISTRY_URL }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.naga-npm-token }}

      - name: Build App
        shell: bash
        run: |
            ./build.sh --env "${{ inputs.BUILD_ENVIRONMENT }}"
          
      - name: Sync to S3
        run: |
            aws s3 sync ./build s3://${{ inputs.S3_TEMP_DIR}}/build/${{ inputs.BUILD_ENVIRONMENT }} 

      - name: Notify Slack of Success 
        if: success()
        uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Static Build Completed

            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job Tag: ${{ env.TAG }}
            - Job URL: ${{ env.JOB_URL }}
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 

      - name: Notify Slack of Failure
        if: failure()
        uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Static Build Failed 

            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job Tag: ${{ env.TAG }}
            - Job URL: ${{ env.JOB_URL }}
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 