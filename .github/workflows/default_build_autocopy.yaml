name: "Build and Push"

on:
  workflow_call:

    inputs:
      SLACK_BUILD_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-build - ID'
      SLACK_BUILD_MESSAGE_ID:
        type: string
        required: true
        description: '#gh-build - Message ID'
      ECR_REPO:
        type: string
        required: true
        description: 'Elastic Container Repository of the service'
      ECR_CACHE_REPO:
        type: string
        required: true
        description: 'Caching Elastic Container Repository of the service'
    secrets:
      slack-bot-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      dockerhub-username:
        required: true
      dockerhub-token:
        required: true
      gh-aws-access-key-id:
        required: true
      gh-aws-secret-access-key:
        required: true
        
jobs:
  default_build:
    runs-on: small-runner
    outputs:
      TAG: ${{ env.TAG }}
      GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}
    strategy:
      matrix:
        path: [autocopy-ng, http-api, migration-tool, monitor-api, signal-broker, utils/reporting-tool]
        include:
          - path: autocopy-ng
            arg1: ng
            arg2: autocopy-ng
            arg3: autocopy-ng
          - path: http-api
            arg1: httpApi
            arg2: http-api
            arg3: http-api
          - path: migration-tool
            arg1: migrationTool
            arg2: migration-tool
            arg3: migration-tool
          - path: monitor-api
            arg1: monitorApi
            arg2: monitor-api
            arg3: autocopy-monitor-api
          - path: signal-broker
            arg1: signalBroker
            arg2: signal-broker
            arg3: autocopy-signal-broker
          - path: utils/reporting-tools
            arg1: reportingTool
            arg2: utils/reporting-tool
            arg3: reporting-tool 

    steps:
      - name: Set environment variables
        run: |
          echo "SHORT_COMMIT=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "GITHUB_ACTOR=${GITHUB_ACTOR}" >> $GITHUB_ENV
          echo "JOB_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: Notify Slack of Build
        id: gh-build
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Starting Image Build

            - Image Tag: ${{ env.TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ env.JOB_URL }}
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Checkout
        uses: actions/checkout@v1
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install AWS cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - name: ECR repo setup
        uses: SwipeStoxGmbH/reusable-workflows/actions/ecr-setup@master
        with:
          ECR_REPO: ${{ inputs.ECR_REPO }}

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          build-args: |
            AWS_ACCESS_KEY_ID=${{ secrets.gh-aws-access-key-id }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.gh-aws-secret-access-key }}
          context: .
          push: true
          #platforms: linux/amd64, linux/arm64
          file: ./${{ matrix.path }}/Dockerfile
          # caching to ECR seems not supported yet
          # cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache
          # cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache,mode=max
          run: |
              for svc in ${{ matrix.path }}
              do
                sbtCmd="$sbtCmd ${{matrix.arg1}}/compile ${{matrix.arg1}}/universal:packageBin"
                if [ "$unzipCmd" != "" ]
                then
                  unzipCmd="$unzipCmd &&"
                fi
                unzipCmd="$unzipCmd unzip /app/${{matrix.arg2}}/target/universal/${{matrix.arg3}}-*.zip -d /dist/${{matrix.arg3}} && mv /dist/${{matrix.arg3}}/${{matrix.arg3}}-*/** /dist/${{matrix.arg3}} && rm -r /dist/${{matrix.arg3}}/${{matrix.arg3}}-*"
              done 
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPO }}:${{ env.TAG }}

          

      - name: Notify Slack of Success
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Image Build Completed

            - Image Tag: ${{ env.TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ env.JOB_URL }}
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 

      - name: Notify Slack of Failure
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Image Build Failed 

            - Image Tag: ${{ env.TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ env.JOB_URL }}
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 
